//
//  BloodSugarRecordTableViewController.m
//  TangNiaoBingHuShi
//
//  Created by Jason on 14-12-1.
//  Copyright (c) 2014年 Jason. All rights reserved.
//

#import "BloodSugarRecordTableViewController.h"
#import "JSDatePickerView.h"
#import "BloodSugar.h"
#import "LoginState.h"
@interface BloodSugarRecordTableViewController ()
{
    float _num;
    float tempNum;
    BOOL _isFloat;
}
@property (weak, nonatomic) IBOutlet UILabel *bloodSugarRecordLabel;
@property (weak, nonatomic) IBOutlet UILabel *surveyLabel;
@property (weak, nonatomic) IBOutlet UILabel *regardTimeLabel;
@property (nonatomic, strong) BloodSugar *bloodSugar;
@property (nonatomic, strong) NSArray *timerArr;
@end

@implementation BloodSugarRecordTableViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    _bloodSugar = [[BloodSugar alloc] init];
    _num = 0.0;
    tempNum = 0.0;
    _isFloat = NO;
    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
    
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
    
}
-(NSArray *)addDatasource
{
    NSMutableArray *array = [[NSMutableArray alloc] init];
    for (int i = 0; i < 350; i ++) {
        [array addObject:[NSString stringWithFormat:@"%.1f", (i * 0.1)]];
        
    }
    return array;
}
- (IBAction)numKeyBtnAction:(id)sender {
    UIButton *button = (UIButton*)sender;
    NSInteger tag = button.tag;
    NSInteger num = 0;
    num = tag - 10000;
    if (tag>=10000 && tag<=10009) {
        if (_num == 0) {
            tempNum = num;
            _num = tempNum;
        } else {
            if (_isFloat) {
                //判断是否已经是小数
                if (_num - (int)_num != 0) {
                    [FVCustomAlertView showDefaultWarningAlertOnView:self.view withTitle:@"输入有误"];
                } else {
                    
                    tempNum = num;
                    _num = _num + (tempNum *0.1);
                }
            } else {
                
                tempNum = num;
                _num = tempNum + _num * 10;
            }
        }
        
    } else if (tag == 10010){
#pragma  mark- 输入小数点
        if (_num == 0) {
            
            [FVCustomAlertView showDefaultWarningAlertOnView:self.view withTitle:@"输入有误"];
        } else {
            if (!_isFloat) {
                _isFloat = YES;
                _num = 1.0 * _num;
            } else {
                [FVCustomAlertView showDefaultWarningAlertOnView:self.view withTitle:@"输入有误"];
            }
        }
    } else {
#pragma  mark- 输入清除键
        _num = 0;
        _isFloat = NO;
        tempNum = 0;
    }
    if (_num > 35) {
        [FVCustomAlertView showDefaultWarningAlertOnView:self.view withTitle:[NSString stringWithFormat:@"%.1f 已超出，请重新输入", _num]];
        _bloodSugarRecordLabel.text = 0;
        tempNum = 0;
        _num = 0;
        NSString * sting = [[NSString alloc] init];
        sting = @"选择发布位置";
    } else {
        if (_isFloat) {
            
            _bloodSugarRecordLabel.text = [NSString stringWithFormat:@"%.1f",_num];
        } else {
            _bloodSugarRecordLabel.text = [NSString stringWithFormat:@"%d",(int)_num];
        }
        
    }

}

-(NSArray *)addTimeDataSource
{
    return  @[@"凌晨3点",
                     @"空腹血糖",
                     @"早餐餐后2小时",
                     @"午餐餐前",
                     @"午餐餐后2小时",
                     @"晚餐餐前",
                     @"晚餐餐后2小时",
                     @"睡前血糖"];
}
#pragma  mark- 记录时间按钮事件
- (IBAction)recordTimeBtnAction:(id)sender {
    JSDatePickerView *datePicker = [JSDatePickerView datePickerViewInstance];
    datePicker.datePicker.datePickerMode = UIDatePickerModeDate;
    datePicker.datePicker.maximumDate = [NSDate date];
    [datePicker showInView:self.view];
    [datePicker valueOfCurrentStr:^(NSString *currentStr) {
        _regardTimeLabel.text = currentStr;
        _bloodSugar.rdate = currentStr;
    }];
    
}
#pragma  mark- 保存测量,判断是否登录
- (IBAction)saveBtnAction:(id)sender {
    _bloodSugar.bloodSugarValue = _bloodSugarRecordLabel.text;
    if ([_bloodSugar.bloodSugarValue isEqualToString:@"0"]) {
        [FVCustomAlertView showDefaultWarningAlertOnView:self.view withTitle:@"请输入血糖值"];
        return;
    }
    if (_bloodSugar.bloodSugarValue && _bloodSugar.rdate && _bloodSugar.timer) {
        NSLog(@"okokokoko");
        LoginState *loginState = [[LoginState alloc] init];
        if ([loginState loginStateWithViewController:self]) {
            NSLog(@"登录成功");
            [self adapterData];
            
        }
    } else {
        if (!_bloodSugar.rdate) {
            [FVCustomAlertView showDefaultWarningAlertOnView:self.view withTitle:@"请选择记录点"];
            return ;
        }
        if (!_bloodSugar.timer) {
            [FVCustomAlertView showDefaultWarningAlertOnView:self.view withTitle:@"请选择测量点"];
            return;
        }
    }
}
#pragma  mark- 对接数据
-(void)adapterData
{

    NSString *key = nil;
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];
    for (int i = 0; i < _timerArr.count; i++) {
        if ([_bloodSugar.timer isEqualToString:_timerArr[i]]) {
            key = [NSString stringWithFormat:@"b%d",i];
            [dic setValue:_bloodSugar.bloodSugarValue forKey:key];
        } else {
            key = [NSString stringWithFormat:@"b%d", i];
            [dic setValue:@"" forKey:key];
        }
    }

    [dic setValue:_bloodSugar.rdate forKey:@"rdate"];
    NSLog(@"%@", dic);
    NSArray *array = [NSArray arrayWithObject:dic];
    if ([NSJSONSerialization isValidJSONObject:array]) {
        NSError *error;
        NSData *jsonData = [NSJSONSerialization  dataWithJSONObject:array options:NSJSONWritingPrettyPrinted error:&error];
        NSString *jsonStr = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
        NSLog(@"%@", jsonStr);
        [self postToServerWithJsonStr:jsonStr];
        
    }
}
#pragma  mark- 上传服务器
-(void)postToServerWithJsonStr:(NSString *)jsonStr
{
    NSDictionary *dic = [NSDictionary dictionaryWithObject:jsonStr forKey:@"data"];
    
    JSNetWorking *network = [[JSNetWorking alloc] init];
    [network postRequestWithURLStr:@"http://test.tanghushi.com/tool.php?mod=api&ac=record2" paramters:dic success:^(id ResultData) {
        NSLog(@"%@", ResultData);

        [FVCustomAlertView showDefaultDoneAlertOnView:self.view withTitle:@"完成"];
        if ([ResultData objectForKey:@"s"]) {
            _bloodSugarRecordLabel.text = @"";
            _surveyLabel.text = @"";
            _regardTimeLabel.text = @"";
            _bloodSugar.rdate = nil;
            _bloodSugar.timer = nil;

        }
        
    } failure:^(NSError *error, AFHTTPRequestOperation *operation) {
        
    }];
}
#pragma  mark- 测量点按钮事件
- (IBAction)surveyBtnAction:(id)sender {
    JSPickerView *picker = [JSPickerView pickerViewInstance];
    picker.firstMArr = (NSMutableArray *)[self addTimeDataSource];
    [picker showInView:self.view];
    [picker valueOfCurrentStr:^(NSString *currentStr) {
        _surveyLabel.text = currentStr;
        _bloodSugar.timer = currentStr;
    }];
}

- (IBAction)bloodSugarRecordBtnAction:(id)sender {
    JSPickerView *picker = [JSPickerView pickerViewInstance];
    picker.firstMArr = (NSMutableArray *)[self addDatasource];
    [picker.pickerView selectRow:60 inComponent:0 animated:YES];
    [picker showInView:self.view];
    [picker valueOfCurrentStr:^(NSString *currentStr) {
        _bloodSugarRecordLabel.text = currentStr;
        _bloodSugar.bloodSugarValue = currentStr;
    }];
    
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
#warning Potentially incomplete method implementation.
    // Return the number of sections.
    return 0;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
#warning Incomplete method implementation.
    // Return the number of rows in the section.
    return 0;
}

/*
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:<#@"reuseIdentifier"#> forIndexPath:indexPath];
    
    // Configure the cell...
    
    return cell;
}
*/

/*
// Override to support conditional editing of the table view.
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
*/

/*
// Override to support editing the table view.
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the row from the data source
        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
    } else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }   
}
*/

/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath {
}
*/

/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath {
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
